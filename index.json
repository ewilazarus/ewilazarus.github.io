[{"content":"Hello there, readers!\nAs a keyboard addict myself, I can\u0026rsquo;t stay long away from the computer. In fact, I\u0026rsquo;m on the second half of my paternity leave and eager to build something and have a break from endless dirty diapers.\nThe Idea # So here\u0026rsquo;s the simple idea: I want to create a CLI program to provide utilities that I use on a daily basis as a software engineer. The language I\u0026rsquo;m going to be using is Typescript. The utilities, or features, I want to include for the first version are:\nEncoding/decoding Base64 strings Pretty printing/minifying JSON payloads Diffing two files These have an OK scope to start with, but the intention here is to have an ever growing set of utilities that will be ammended to the program, on the long run.\nBut, Gabe\u0026hellip; Typescript? Really? I know you aren\u0026rsquo;t fond of this ecosystem. Why then?\nBesides the CLI interface which will allow me to integrate it to my workflow that is heavily terminal based, I want to create this \u0026ldquo;package\u0026rdquo; with well defined interfaces, so the utilities can also be consumed by a web UI. And you know\u0026hellip; when it comes to the browser, we must to fallback to Typescript/Javascript.\nAnd what about WASM?\nWell, I haven\u0026rsquo;t delved into that, yet. Actually, this could be something nice to try in the future.\nIsn\u0026rsquo;t this toolkit going against the minimalist UNIX philosophy of having one particular tool for one particular job?\nYes.\nThe Planning # Naming # There\u0026rsquo;s a saying by Phil Karlton in the programming world that states that \u0026ldquo;there are only two hard things in Computer Science: cache invalidation and naming things\u0026rdquo;. I\u0026rsquo;d say off by one errors are also hard, although, that is a different conversation.\nI don\u0026rsquo;t believe this initiative will envolve dealing with caching at all, but I needed a name for this toolkit and after some (not really deep) thinkering I decided to go with ubt. Some reasons behind this choice are:\nI\u0026rsquo;m unaware of another tool called ubt, although there\u0026rsquo;s probably one already existent. (Note that if you\u0026rsquo;re the creator of the genuine ubt, please forgive my lack of originality!) If you try hard enough, this is a mneumonic for \u0026ldquo;utility belt\u0026rdquo; Ergonomics # By having just a few letters, this can be quickly invoked on the command prompt and has potential to build some muscle memory for the touch typists.\nMoreover, while in the CLI realm, I want each utility to be invoked as a sub-command, so if we consider the set of 3 utilities I listed above, those can be b64, json and diff.\nAs a matter of fact, it is possible to divide these sub-commands into distinct categories:\nUtilities that receive one parameter: b64, json Utility that receives two parameters: diff For the first case, I want the program to read the input from the stdin, so it can play nicer with other tools. For instance:\n$ echo \u0026#34;string to be encoded in base64\u0026#34; | ubt b64 -e Whereas, for the second case, we will be using positional arguments:\n$ ubt diff \u0026lt;file1\u0026gt; \u0026lt;file2\u0026gt; The Scaffolding # To begin with, it\u0026rsquo;s worth mentioning that working on a already exsiting Typescript codebase and setting one up from scratch are two different beasts. In my opinion the Javascript ecosystem is tremendously fragmented if compared to other ecosystems, such as Go or .NET — there are multiple ways and tools to achieve anything you could possibly imagine. There\u0026rsquo;s even an ongoing joke about the number of days since the last Javascript framework! But that isn\u0026rsquo;nt a problem per se, as long as you\u0026rsquo;re familiar with the options available.\nWith that being said, I have to admit I had loads of fun setting the project up.\nFor the tooling I chose to go with:\nYarn for dependency management ESLint for linting Prettier for formatting Jest for testing Husky for nifty git hooks Besides these, there\u0026rsquo;s also the Typescript transpilation and its configurations.\nThe Execution # We have all the bells and whistles in place, but yet no code. Let\u0026rsquo;s look at how things were built and why they were built this way.\nProject Structure # I opted for a \u0026ldquo;as flat as possiblie\u0026rdquo; directory structure. Given the few constraints for this problem domain, I didn\u0026rsquo;t want to over engineer the project.\nHere\u0026rsquo;s what the src directory with omitted test files looks like:\n$ tree src -I \u0026#39;*.test.ts\u0026#39; src ├── base64.ts ├── cli.ts ├── diff │ ├── index.ts │ └── stringFormatter.ts ├── index.ts └── json.ts 2 directories, 6 files The index.ts is the program entry point. It imports the command line parser factory that is defined in cli.ts, creates an instance of it for parsing the provided arguments.\nThe cli.ts is also responsible for gluing together the functionality that is defined in base64.ts, diff and json.ts.\nThe only reason diff differs (pun intended!) from the other functionalities by having a folder instead of a single file, is because it was built in a way that allows for future extensions. Suppose that we want this package being used behind the scenes by a web UI — we could create a htmlFormatter.ts, or something in this line, and inherit from the constructs that are exported on the diff/index.ts to allow for DRYness.\nTest Driven Development # I decided to operate in a TDD fashion for this little project.\nBesides all of the evangelism that people do about TDD on the internet, for me, the most underrated benefit of it is the sense of progress obtained from the quick feedback you get. You see the tests fail, implement a little functionality, run the tests again and then see them pass. When working solo on a project, this is essential.\nThe second best side effect of this technique is that you tend to end up with better defined interfaces, as you are forced to, a priori, write testing code that acts as the software artifact that is going to be consuming and invoking the functions/methods under test.\nHowever, for TDD to be effectively done, you need to have solid and well defined requirements. Ideally, you\u0026rsquo;d only start implementing it after modeling the system or going through a prototyping stage, otherwise, you\u0026rsquo;d end up having to spend time figuring out how your components are going to interact with one another and having a ton of rework fixing tests as you move towards the ideal solution.\nThe Result # Consumption # In case you want to use this tool, you\u0026rsquo;ll need a Javascript package manager.\nFor yarn, you\u0026rsquo;ll have to run the following command:\n$ yarn global add ubt In case you\u0026rsquo;re using npm, you\u0026rsquo;ll have to run the following command:\n$ npm install -g ubt That should add the ubt script as an executable to whatever your package manager\u0026rsquo;s installation directory is. Make sure that directory is available on your $PATH, so you can invoke the command from any directory on your file system.\nReferences # Github Repository Npm Package Thanks for reading! I had a great time writing this blog post and creating this tool.\nStay tuned for more!\n","date":"24 August 2023","permalink":"/posts/cli-utility-belt/","section":"Posts","summary":"Hello there, readers!","title":"Creating a CLI Utility Belt"},{"content":"","date":null,"permalink":"/","section":"ewilogs","summary":"","title":"ewilogs"},{"content":"","date":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"javascript"},{"content":"","date":null,"permalink":"/tags/node/","section":"Tags","summary":"","title":"node"},{"content":"","date":null,"permalink":"/tags/npm/","section":"Tags","summary":"","title":"npm"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/typescript/","section":"Tags","summary":"","title":"typescript"},{"content":" Welcome to my corner of the internet!\nI\u0026rsquo;m delighted to have you in my blog, where I share a glimpse of my journey. My name is Gabriel Lima, and I come from the vibrant and culturally rich landscape of Rio de Janeiro, Brazil. At 35 years young, life has been a tapestry of experiences that I\u0026rsquo;m eager to unfold.\nNurturing a beautiful family alongside my beloved wife, Erica, is a cornerstone of my joy. Our greatest gift, our son Antonio, brings boundless laughter and love into our lives.\nDuring the day, I don the hat of a professional software engineer, delving deep into the realms of backend development, distributed systems, and the intricate art of algorithms. My academic journey led me to the prestigious halls of PUC-Rio, where I graduated in computer science in 2014. My professional trajectory has traversed diverse domains, including statistics, e-commerce, fintech, and a few personal projects.\nWhen I\u0026rsquo;m off-duty, my top pastimes include:\nRunning Weightlifting TV shows/movies Fiction books Video games Beach Brazilian politics Your presence here enriches this digital space, and I\u0026rsquo;m excited to connect with you through shared experiences.\n","date":"18 August 2023","permalink":"/about/","section":"ewilogs","summary":"Welcome to my corner of the internet!","title":"About"},{"content":"","date":null,"permalink":"/tags/blogging/","section":"Tags","summary":"","title":"blogging"},{"content":"","date":null,"permalink":"/tags/community/","section":"Tags","summary":"","title":"community"},{"content":"","date":null,"permalink":"/tags/discipline/","section":"Tags","summary":"","title":"discipline"},{"content":"Hey there, dear readers!\nI\u0026rsquo;m thrilled to welcome you to my brand-new blog, a digital canvas where thoughts, ideas, and experiences will be woven together.\nAs I embark on this exciting journey, allow me to take a moment to share with you the essence of why I\u0026rsquo;ve decided to plunge into the world of blogging.\nThe Birth of a Blog # In a world bustling with information, opinions, and stories, I find myself yearning for a space to call my own — a platform where I can express my thoughts, reflect on life\u0026rsquo;s adventures, and perhaps even make a positive impact on others.\nThis blog represents a slice of my life, a sanctuary where ideas can flourish, and connections can be nurtured.\nA Haven of Discipline # One might wonder, \u0026ldquo;Why start a blog now?\u0026rdquo; The answer lies in the concept of discipline — a value I hold dear and intend to uphold steadfastly throughout this blogging journey.\nLife, as we know, can get rather hectic, and commitments tend to sway like leaves in the wind. That\u0026rsquo;s where discipline comes in.\nBy committing to regular posts, I\u0026rsquo;m not only challenging myself creatively but also cultivating a habit of consistency that will trickle into other aspects of my life.\nGiving Back to the Community # As an engineer that\u0026rsquo;s been working over 10 years with computer programming, I have been consuming blog posts from people that put aside some time to register drops of knowledge.\nThose posts really helped me grasp concepts, debug things and solve problems that I probably wouldn\u0026rsquo;t if they didn\u0026rsquo;t exist.\nI feel that until today I wasn\u0026rsquo;t able to give back to the community, and this is another reason I want to start this blog. Hopefully I can help someone, someday.\nImproving my Writing # I think my writing skills are far from great. By having this commitment of posting often, I\u0026rsquo;ll need to force myself to write more, and therefore I hope to get better at it.\nAlso, I might as well end up improving my English and translation skills, as I intend to maintain this a bilingual blog (English/Portuguese).\nI hope to see you again. Until next time!\n","date":"18 August 2023","permalink":"/posts/hello-world/","section":"Posts","summary":"Hey there, dear readers!","title":"Hello, world!"},{"content":"","date":null,"permalink":"/tags/writing/","section":"Tags","summary":"","title":"writing"}]